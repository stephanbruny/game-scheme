(use-modules (srfi srfi-9))

(define-record-type <entity>
  (make-entity name position movement onupdate)
  entity?
  (name         entity-name)
  (position     entity-position    set-entity-position!)
  (movement     entity-movement    set-entity-movement!)
  (onupdate     entity-onupdate)
)

(define (rand-vec2 n m)
    (cons (random n) (random m))
)
(define (rand-move)
    (rand-vec2 3.0 3.0)
)
(define (rand-pos)
    (rand-vec2 240 128)
)
(define (makelist fn n)
  (if (= n 0)
     (list 0)                       ; base case. Just return (0)
     (cons (fn) (makelist fn (- n 1)))))

(define (remove-last ls) 
    (reverse (cdr (reverse ls)))
)

(define (uuid)
    (string-concatenate (remove-last (makelist (lambda ()
        (let ((n (random 255)))
            (number->string n 16)
        )
    ) 16)))
)

(display (uuid))

(define (on-entity-update e)
    (if (entity? e)
        (let ((pos (entity-position e)) (mov (entity-movement e)))
            (let ((x (car pos)) (y (cdr pos)) (mx (car mov)) (my (cdr mov)) )
                (if (> x 240) (set! mx (- 0 mx)))
                (if (> y 128)(set! my (- 0 my)))
                (if (< x 0)(set! mx (- 0 mx)))
                (if (< y 0)(set! my (- 0 my)))
                (set-entity-position! e (cons (+ mx x) (+ my y)) )
                (set-entity-movement! e (cons mx my))
            )
        )
    )
)

(define (random-entity)
    (make-entity (uuid) (rand-pos) (rand-move) on-entity-update)
)

(define entities (makelist random-entity 100))

(define current-time 0)
(define tx 0.0)
(define tex)
(define rect_1 (rectangle 0 0 16 16))

(define (update-entities entitylist)
    (for-each (lambda (item)
         (if (entity? item)
            (let ((callback (entity-onupdate item)))
                (callback item)
            )
        )   
    ) entitylist)
)

(define (render-entities entitylist)
    (for-each (lambda (item)
        (if (entity? item)
            (let ((pos (entity-position item)))
                (texture:draw tex (car pos) (cdr pos))
            )
        )
    ) entitylist)
)

(define (move-entities entitylist)
    (for-each (lambda (item)
        (if (entity? item)
            (set-entity-movement! item (rand-move))
        )
    ) entitylist)
)

(game:set-update-fps! 60)

(define (on-load)
    (set! tex (texture:load "spike-medium.png"))
    (display "Texture: ") 
    (display (texture:width tex))
    (display " : ")
    (display (texture:height tex))
    (display "\n")
)
(define (render)
    (render-entities entities)
)
(define (update dt)
    (set! current-time (+ dt current-time))
    (update-entities entities)
    (set! tx (floor (/ current-time 0.025)))
    (if (input:key-pressed? 32)
        (move-entities entities)
    )
)
(game 800 600 "Tinkerboy with Raylib" on-load update render)
(texture:unload tex)